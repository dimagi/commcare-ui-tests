// Should send email/slack notification
def notify = true
// Number of times to retry a failed test
def retries = 2
// Pool of devices on AWS to run on
def poolArray = ['android10','asus_5_0']

// Job to copy the tested APK from
def cc_android_job = env.CUSTOM_JOB_TARGET ? "${CUSTOM_JOB_TARGET}" : 'commcare-android'

def custom_tag =  env.CUSTOM_TAG_TO_RUN ? "${CUSTOM_TAG_TO_RUN}" : ''

def pipeline_runner_branch_target =  env.target_ui_test_branch ? "${target_ui_test_branch}" : 'master'

def buildPassing = true

node {
    stage('test') {

        // All of the tags run on AWS. We specify these individually so that we can iterate over each
        // tag and retry them granularly when they fail.

        def ui_tests_list = ['@FormEntry', '@Fixtures', '@MenuTests', '@Login',
                       '@FormSettings', '@CaseSharing', '@Languages',
                       '@CaseListSearch', '@CaseListSort', '@Settings', '@FormFiltering', '@Tiles',
                       '@SessionExpiration', '@Dialogs', '@InstallList', '@DemoUserOnline', '@DemoUserOffline',
                       '@LookupTableOptionSorting', '@ManualQuarantine', '@LogSubmission']

        def integration_tests_list = ['@DeletedUser', '@SyncRecovery', '@SubmissionErrorResponse', '@AsyncRestore',
                                '@LookupTableSync','@AppUpdate', '@FormAttachmentUpload', '@CaseClaim', '@InstallList']

        def tagArray
        if (custom_tag != '') {
             if (custom_tag.indexOf(',') > 0) {
               // Parse as a list if contains commas
               tagArray = Eval.me(custom_tag)
             } else {
               tagArray =  [custom_tag]
             }
        } else if (env.integration_job == 'true') {
             tagArray = integration_tests_list
        } else {
             tagArray = ui_tests_list
        }
        def failureList
        try {
            echo 'Running tests...'
            buildPassing = true

            def round = 0
            for (pool in poolArray) {
                round = round + 1
                failureList = []
                for (tag in tagArray) {
                    def stageString = "${tag} on ${pool}"
                    try {
                        def trial = 0
                        retry(retries) {
                            trial = trial + 1
                            stage ("${stageString} try ${trial}") {
                                echo "Testing ${stageString} try number ${trial} tag ${tag}"
                                def testRun = build job: 'pipeline-runner', parameters: [
                                    [$class: 'StringParameterValue', name: 'pool', value: pool],
                                    [$class: 'StringParameterValue', name: 'stageString', value: stageString],
                                    [$class: 'StringParameterValue', name: 'tag', value: tag],
                                    [$class: 'StringParameterValue', name: 'target_ui_test_branch', value: pipeline_runner_branch_target],
                                    [$class: 'StringParameterValue', name: 'cc_android_job', value: cc_android_job]
                                ]
                                echo "Step ${stageString} set to SUCCESS"
                            }
                        }
                    } catch (exc) {
                        echo "Step ${stageString} set to FAILURE"
                        if(!failureList.contains(tag)){
                            failureList.add(tag)
                        }
                    }
                }
                def failingListString = failureList.join(",")
                echo "Failed round ${round} with failing tags ${failingListString}"
                tagArray = failureList
            }
        } finally {
            buildPassing = failureList.size() == 0
            failingListString = failureList.join(",")
            if (buildPassing) {
                echo "Passed"
                currentBuild.result = 'SUCCESS'
            } else {
                echo "Failed with failing tags ${failingListString}"
                currentBuild.result = 'FAILURE'
            }
            if (notify) {
                def test_label = env.integration_job == 'true' ? "Integration" : "UI"
                if (buildPassing) {
                    slackSend color: 'good', message: "${cc_android_job} ${test_label} tests passed, :tight:"
                } else {
                    slackSend color: 'bad', message: "${cc_android_job} ${test_label} tests failed, :nottight:. Failing tests ${failingListString}"
                    mail (to: 'mobiledev@dimagi.com',
                        subject: "Amazon device farm tests failed.",
                        body: "${cc_android_job} ${test_label} tests failed, weak! Failing tests ${failingListString}");
                }
            }
        }
    }
}
