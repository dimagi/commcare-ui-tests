stage('build') {
    build job: 'commcare-odk-build-tests'
}

def notify = false
def retries = 3

node {
    stage('test') {

        def poolArray = ['asus']

        // job to copy the tested APK from
        def cc_android_job = 'commcare-android'

        // All of the tags run on AWS. We specify these individually so that we can iterate over each
        // tag and retry them granularly when they fail.
        def tagArray = ['@MenuTests', '@Login', '@FormEntry', '@Fixtures', '@FormSettings',
                    '@Setup', '@CaseSharing', '@Languages',
                    '@CaseListSearch', '@CaseListSort', '@Settings', '@FormFiltering',
                    '@SessionExpiration', '@Dialogs']

        try {
            echo 'Running tests...'
            currentBuild.result = 'SUCCESS'

            // Run the commcare-odk-tests job for each device pool and each tag, retrying up to three
            // times on failure.s

           step ([$class: 'CopyArtifact',
              projectName: 'commcare-odk-build-tests',
              filter: 'aws/features.zip',
              fingerprintArtifacts: true,
              flatten: true]);

           step ([$class: 'CopyArtifact',
              projectName: cc-android-job,
              filter: '**/app-commcare-release.apk',
              fingerprintArtifacts: true,
              flatten: true]);

            for (pool in poolArray) {
                for (tag in tagArray) {
                    def stageString = "Testing ${tag} on ${pool}"
                    try {
                        stage(stageString) {
                            count = 1
                            retry(retries) {
                                echo "Testing ${stageString} try number ${count} tag ${tag}"
                                step([$class: 'AWSDeviceFarmRecorder',
                                                    projectName: 'commcare-odk',
                                                    devicePoolName: 'custom pool',
                                                    runName: 'jenkins-functional-tests-${BUILD_ID}',
                                                    appArtifact: 'app-commcare-release.apk',
                                                    testToRun: 'CALABASH',
                                                    calabashFeatures: 'features.zip',
                                                    calabashTags: tag ,
                                                    ignoreRunError: false,
                                                    isRunUnmetered: true,
                                                    storeResults: true,
                                                ])
                            }
                        }
                    } catch(error) {
                        echo "Failed testing ${stageString}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        } finally {
            if (notify) {
                if (currentBuild.result == 'SUCCESS') {
                    slackSend color: 'good', message: 'Amazon device farm tests passed, :tight:'
                } else {
                    slackSend color: 'bad', message: 'Amazon device farm tests failed, :nottight:'
                    mail (to: 'mobiledev@dimagi.com',
                        subject: "Amazon device farm tests failed.",
                        body: "Amazon device farm tests failed.");
                }
            }
        }
    }
}