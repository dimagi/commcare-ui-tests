// Should send email/slack notification
def notify = false
// Number of times to retry a failed test
def retries = 3
// Pool of devices on AWS to run on
def poolArray = ['moto']
// Job to copy the tested APK from
def cc_android_job = 'commcare-android'

def buildPassing = true

node {
    stage('test') {

        // All of the tags run on AWS. We specify these individually so that we can iterate over each
        // tag and retry them granularly when they fail.
        def tagArray = ['@MenuTests', '@Login', '@FormEntry', '@Fixtures', '@FormSettings',
                    '@Setup', '@CaseSharing', '@Languages',
                    '@CaseListSearch', '@CaseListSort', '@Settings', '@FormFiltering',
                    '@SessionExpiration', '@Dialogs']
        try {
            echo 'Running tests...'
            currentBuild.result = 'SUCCESS'

            checkout scm

            sh 'chmod a+x scripts/make_aws_features'
            sh 'bash scripts/make_aws_features'

            step ([$class: 'CopyArtifact',
              projectName: cc_android_job,
              filter: '**/app-commcare-debug.apk',
              fingerprintArtifacts: true,
              flatten: true]);

            // Run the commcare-odk-tests job for each device pool and each tag, retrying up to three
            // times on failures
            for (pool in poolArray) {
                for (tag in tagArray) {
                    def stageString = "${tag} on ${pool}"
                    def stagePassed = false
                    stage(stageString) {
                        count = 0
                        while (count < 3 and !stagePassed) {
                            echo "Testing ${stageString} try number ${count} tag ${tag}"
                            step([$class: 'AWSDeviceFarmRecorder',
                                                projectName: 'commcare-odk',
                                                devicePoolName: pool,
                                                runName: stageString,
                                                appArtifact: 'app-commcare-debug.apk',
                                                testToRun: 'CALABASH',
                                                calabashFeatures: 'aws/features.zip',
                                                calabashTags: tag,
                                                isRunUnmetered: true,
                                                storeResults: true,
                                            ])
                            if (currentBuild.result == 'SUCCESS') {
                                echo "Step ${stageString} set to SUCCESS"
                                stagePassed = true
                            }
                            count = count + 1
                        }
                        if (!stagePassed) {
                            echo "Build set to FAILURE after on step ${stageString}"
                            buildPassing = false
                        }
                        currentBuild.result = "UNSET"
                    }
                }
            }
        }
        } finally {

            if (buildPassing) {
                currentBuild.result = 'SUCCESS'
            } else {
                currentBuild.result = 'FAILURE'
            }

            if (notify) {
                if (currentBuild.result == 'SUCCESS') {
                    slackSend color: 'good', message: 'Amazon device farm tests passed, :tight:'
                } else {
                    slackSend color: 'bad', message: 'Amazon device farm tests failed, :nottight:'
                    mail (to: 'mobiledev@dimagi.com',
                        subject: "Amazon device farm tests failed.",
                        body: "Amazon device farm tests failed.");
                }
            }
        }
    }
}