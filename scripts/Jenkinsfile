// Should send email/slack notification
def notify = true
// Number of times to retry a failed test
def retries = 3
// Pool of devices on AWS to run on
def pool = 'asus_5_0'

// Job to copy the tested APK from
def cc_android_job = env.CUSTOM_JOB_TARGET ? "${CUSTOM_JOB_TARGET}" : 'commcare-android'

def custom_tag =  env.CUSTOM_TAG_TO_RUN ? "${CUSTOM_TAG_TO_RUN}" : ''

def pipeline_runner_branch_target =  'test-profile'

def buildPassing = true

def failureList = []

node {
    stage('test') {
        
        // All of the tags run on AWS. We specify these individually so that we can iterate over each
        // tag and retry them granularly when they fail.

        def ui_tests_list = ['@Fixtures', '@MenuTests', '@Login', '@FormEntry',
                       '@FormSettings', '@CaseSharing', '@Languages',
                       '@CaseListSearch', '@CaseListSort', '@Settings', '@FormFiltering', '@Tiles',
                       '@SessionExpiration', '@Dialogs', '@InstallList', '@DemoUserOnline', '@DemoUserOffline',
                       '@LookupTableOptionSorting', '@ManualQuarantine', '@LogSubmission']

        def integration_tests_list = ['@DeletedUser', '@SyncRecovery', '@SubmissionErrorResponse', '@AsyncRestore',
                                '@LookupTableSync','@AppUpdate', '@FormAttachmentUpload', '@CaseClaim', '@InstallList']

        def tagArray
        if (custom_tag != '') {
             if (custom_tag.indexOf(',') > 0) {
               // Parse as a list if contains commas
               tagArray = Eval.me(custom_tag)
             } else {
               tagArray =  [custom_tag]
             }
        } else if (env.integration_job == 'true') {
             tagArray = integration_tests_list
        } else {
             tagArray = ui_tests_list
        }

        sh 'chmod a+x scripts/make_features'
        sh 'bash scripts/make_features'

        step ([$class: 'CopyArtifact',
              projectName: params.cc_android_job,
              filter: '**/app-commcare-release.apk',
              fingerprintArtifacts: true,
              flatten: true]);

        step([$class: 'AWSDeviceFarmRecorder',
                projectName: 'commcare-odk',
                devicePoolName: pool,
                runName: 'Test Run',
                appArtifact: 'app-commcare-release.apk',
                testToRun: 'CALABASH',
                calabashFeatures: 'tests.zip',
                calabashProfile: 'ui',
                isRunUnmetered: true,
                storeResults: false,
                ignoreRunError: false,
            ])
    }
    if (buildPassing) {
        echo "Passed"
        currentBuild.result = 'SUCCESS'
    } else {
        echo "Failed with failing tags ${failingListString}"
        currentBuild.result = 'FAILURE'
    }
    if (notify) {
        def test_label = env.integration_job == 'true' ? "Integration" : "UI"
        if (buildPassing) {
            slackSend color: 'good', message: "${cc_android_job} ${test_label} tests passed, :tight:"
        } else {
            slackSend color: 'bad', message: "${cc_android_job} ${test_label} tests failed, :nottight:. Failing tests ${failingListString}"
            mail (to: 'mobiledev@dimagi.com',
                subject: "Amazon device farm tests failed.",
                body: "${cc_android_job} ${test_label} tests failed, weak! Failing tests ${failingListString}");
        }
    }
}
